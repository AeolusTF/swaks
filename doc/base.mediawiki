== NAME ==

<blockquote>swaks - SMTP transaction tester</blockquote>

== DESCRIPTION ==

<blockquote>
swaks' primary design goal is to be a transaction-oriented SMTP test tool, used for debugging mail servers. stress testing configs, etc.  It handles SMTP features and extensions such as TLS, authentication, and pipelining; multiple version of the SMTP protocol including SMTP, ESMTP, and LMTP; and multiple transport methods including unix-domain sockets, internet-domain sockets, and pipes to spawned processes.  All of this is wrapped in a secondary design goal of being extremely configurable for ease of use of operators and scripters.  Options can be specified in environment variables, config files, or the command line.
</blockquote>

<pre>
This program was written because I was testing a new MTA on an alternate port.  I did so much testing that using interactive telnet grew tiresome.  Over the next several years this program was fleshed out and every single option was added as a direct need of some testing I was doing as the mail admin of a medium sized ISP, with the exception of TLS support which was added on a whim.  As such, all options are reasonably well thought out and fairly well tested (though TLS could use more testing).
</pre>

== Quick Start ==

<blockquote>
Deliver a standard test email to user@example.com:
: swaks -t user@example.com
Deliver a standard test email to user@example.com using the LMTP protocol via a UNIX domain socket file
: swaks -t user@example.com --socket /var/lda.sock --protocol LMTP 
Deliver a standard test email, requiring CRAM-MD5 authentication as user me@example.com.  An "X-Test" header will be added to the email body.  The authentication password will be prompted for.
: swaks -t user@example.com -f me@example.com --auth CRAM-MD5 --auth-user me@example.com --h-X-Test "test email"
</blockquote>

<pre>
=item swaks

prompt user for to address and send a default email.

=item cat mailfile | swaks -g -n -t user@example.com -tlso -a -au user -ap password

send the contents of "mailfile" to user@example.com, using TLS if available, requiring authentication, using user/password as authentication information.
</pre>

== OPTION PROCESSING ==

<blockquote>
Options can be given to swaks in three ways.  They can be specified in a configuration file, in environment variables, and on the command line.  Depending on the specific option and whether or not an argument is given to it, the value for an argument might be prompted for interactively.
</blockquote>

<blockquote>
When swaks evaluates its options, it first looks for a configuration file (either in a default location or specified with --config).  Then it evaluates any environment variables.  Finally, it evaluates command line arguments.  At reach round of processing, any options set earlier will be overridden.  '''Additionally, any option can be prefixed with "no-" to cause swaks to forget that the variable had previously been set.'''  This capability is necessary because for may options a defined-but-empty value has different behavior than never having been specified in the fist place.
</blockquote>

<blockquote>
The exact mechanism and format for using each of the types is listed below.
</blockquote>

=== CONFIGURATION FILE ===

<blockquote>
A configuration file to set commonly-used or abnormally verbose options can be used.  By default swaks looks in order for $SWAKS_HOME/.swaksrc, $HOME/.swaksrc, and $LOGDIR/.swaksrc.  If one of those is found to exist (and --config has not been used) that file is used as the configuration file
</blockquote><blockquote>
Additionally a configuration file in a non-default location can be specified using --config.  If this is set to an empty value, it tells swaks that no configure file is to be used, including a default file should one exist.  If --config points to a readable file, it is used as the configuration file, overriding any default that may exist.  If it points to a non-readable file and error will be shown and swaks will exit.
</blockquote><blockquote>
It is important to note that only one configuration file will ever be used per single invocation of swaks, even if multiple configuration files are specified.
</blockquote><blockquote>
The format of the configuration file is designed to allow future expansion.  Currently it only allows the equivalent of command line options to be specified.  These options must be given between a line of "<ARGS>" and a line of "</ARGS>".  '''Between these two lines, lines beginning with a hash (#) are ignored.  All other lines are assumed to be an option to swaks.  In this file the leading dash or dashes to options are optional.'''  Here is an example of the contents of a configuration file:
<pre>
<ARGS>
# always use this sender, no matter server or logged in user
--from fred@example.com
# I prefer my test emails have a pretty from header
--h-From: "Fred Example" <fred@example.com>
</ARGS>
</pre>
Note that everything after the first space is assumed to be the arg and is not shell processed, so any quoting is usually unneeded and will not be stripped off by the shell.
</blockquote><blockquote>
There is a deprecated option --input-file (or -l) in swaks that was a precursor of the configuration file defined here.  That option has been judged deficient and is being replaced wholesale with the idea of the configuration file defined above.  The option still exists for the time being but its use is strongly discouraged, it is no longer documented, and it will be removed entirely in some future release.
</blockquote>

=== ENVIRONMENT VARIABLES ===

<blockquote>
Options can be supplied via environment variables.  The variables are in the form $SWAKS_ARG_option, where option is the name of the option that would be specified on the command line, minus any leading dashes.  '''Also, since dashes aren't allowed in variable names, they should be replaced with underscores.'''  The following would create the same options shown in the configuration file example:

<pre>
$> SWAKS_ARG_from='fred@example.com'
$> SWAKS_ARG_h_From='"Fred Example" <fred@example.com>'
</pre>

Setting a variable to an empty value is the same as specifying it on the command line with no argument.  For instance, setting SWAKS_ARG_server="" would cause swaks to prompt the use for the server to connect to at each invocation.
</blockquote><blockquote>
In addition to setting the equivalent of command line options, SWAKS_HOME can be set to a directory containing the default .swaksrc to be used.
</blockquote>

=== COMMAND LINE OPTIONS ===

<blockquote>
The final method of supplying arguments to swaks is via the command line.  The options behave in a manner consistent with most implementations.  Many options have both a short and long form (for instance -s and --server).  By convention short options are specified with a single dash and long options are specified with a double-dash.  However this is only a convention, either prefix will work with either type.
</blockquote><blockquote>
The following demonstrates the example shown in the configuration and environment variable sections:
<pre>
$> swaks --from fred@example.com --h-From: '"Fred Example" <fred@example.com>'
</pre>
</blockquote>

== OPTIONS ==

=== TRANSPORT ===

<blockquote>
swaks can connect to a destination via unix pipes, unix domain sockets, or internet domain sockets.  Internet-domain sockets is the default behavior.  Because of the singular nature of the transport used, '''each set of options in the following section is mutually exclusive'''.  Below is a brief description of each type of transport and the options that are specific to that transport type.
</blockquote>

==== INTERNET-DOMAIN SOCKETS ====

<blockquote>
This transport attempts to deliver a message via TCP/IP, the standard method for delivering SMTP.  This is the default transport for swaks.  If none of --server, --pipe, or --socket are given then this transport is used and the destination server is determined from the recipient's domain.
</blockquote><blockquote>
--server [destination mail server], -s [destination mail server]
: Explicitly tell swaks to use internet domain sockets and specify the hostname or IP address to which to connect, or prompt if no argument fiven.  If this option is not given and no other transport option is given, the target mail server is determined from the appropriate DNS records for the domain of the recipient email address.  '''If Net::DNS is not available, use the A record for the domain.'''  See also --copy-routing.
</blockquote><blockquote>
--port [port], -p [port]
: Specify which TCP port on the target server is to be used, or prompt if no argument is listed.  The argument can be a service name (as found in /etc/services) or a port number.  If unspecified, swaks will use service 'lmtp' is --protocol is LMTP, service 'smtps' if --tls-on-connect is used, and service 'smtp' otherwise.
</blockquote><blockquote>
--local-interface [IP or hostname], -li [IP or hostname]
: Use argument as the local interface for the outgoing SMTP connection, or prompt user if no argument given.  Argument can be an IP or a hostname.  Default action is to let OS choose local interface.
</blockquote><blockquote>
--copy-routing [domain]
: The argument is interpreted as the domain part of an email address and it is used to find the destination server using the same logic that would be used to look up the destination server for an recipient email address.
</blockquote>

==== UNIX-DOMAIN SOCKETS ====

<blockquote>
This transport method attempts to deliver messages via a unix-domain socket file.  This is useful for testing MTA/MDAs that listen on socket files (for instance, testing LMTP delivery to Cyrus).
</blockquote><blockquote>
--socket [/path/to/socket/file]
: This option takes as its argument a unix domain socket file.
</blockquote>

==== PIPES ====

<blockquote>
This transport attempts to spawn a process and communicate with it via pipes.  The spawned program must be prepared to behave as a mail server over STDIN/STDOUT.  Any MTA designed to operate from inet/xinet should support this.  In addition some MTAs provide testing modes that can be interacted with via STDIN/STDOUT.  This transport can be used to automate that testing.  For example, if you implemented DNSBL checking with Exim and you wanted to make sure it was working, you could run 'swaks --pipe "exim -bh 127.0.0.2"'.  In an ideal world the process you are talking to should behave exactly like an SMTP server on stdin and stdout.  Any debugging should be sent to stderr, which will be directed to your terminal.  In the real world swaks can generally handle some debug on the child's stdout, but there are no guarantees on how much it can handle.
</blockquote><blockquote>
--pipe [/path/to/command and arguments]
: Provide a process name and arguments to the process.  swaks will attempt to spawn the process and communicate with it via pipes.
</blockquote>

=== SMTP LAYER OPTIONS ===
<pre>
=item -t, --to

Use argument as "RCPT TO" address, or prompt user if no argument specified.  Overridden by -l token TO.  Multiple recipients can be specified by supplying as one comma-delimited argument.

There is no default for this option.  If no to addess is specified with -t or TO token, user will be prompted for To: address on STDIN.

=item -f, --from

Use argument as "MAIL FROM" address, or prompt user if no argument specified.  Overridden by -l token FROM.  If no from address is specified, default is user@host, where user is the best guess at user currently running program, and host is best guess at DNS hostname of local host.  The string <> can be supplied to mean the null sender.

=item -h, --helo, --ehlo

Use argument as argument to SMTP EHLO/HELO command, or prompt use if no argument is specified.  Overridden by -l token HELO.  If unspecified, swaks uses best guess at DNS hostname of local host.

=item -q, --quit-after

The argument to this option is used as an indicator of where to quit the SMTP transaction.  It can be thought of as "quit after", with valid arguments CONNECT, FISRT-HELO, TLS, HELO, AUTH, MAIL, and RCPT.  In a non-STARTTLS session, FIRST-HELO and HELO behave the same way.  In a STARTTLS session, FIRST-HELO quits after the first HELO sent, while HELO quits after the second HELO is sent.

For convenience, LHLO and EHLO are synonyms for HELO, FIRST-EHLO and FIRST-LHLO for FIRST-HELO, FROM for MAIL, and TO for RCPT.

=item --timeout

Use argument as the SMTP transaction timeout, or prompt user if no argument given.  Overridden by the -l token TIMEOUT.  Argument can either be a pure digit, which will be interpretted as seconds, or can have a specifier s or m (5s = 5 seconds, 3m = 180 seconds).  As a special case, 0 means don't timeout the transactions.  Default value is 30s.

=item --protocol

Specify which protocol to use in the transaction.  Valid options are shown in the table below.  Currently the 'core' protocols are SMTP, ESMTP, and LMTP.  By using variations of these protocol types one can specify default ports, whether authentication should be attempted, and the type of TLS connection that should be attempted.  The default protocol is ESMTP.  This table demonstrates the available arguments to --protocol and the options each sets as a side effect:

           HELO            AUTH    TLS     PORT
   --------------------------------------------------
   SMTP    HELO                            smtp  / 25
   SSMTP   EHLO->HELO              -tlsc   smtps / 465
   SSMTPA  EHLO->HELO      -a      -tlsc   smtps / 465
   SMTPS   HELO                    -tlsc   smtps / 465
   ESMTP   EHLO->HELO                      smtp  / 25
   ESMTPA  EHLO->HELO      -a              smtp  / 25
   ESMTPS  EHLO->HELO              -tls    smtp  / 25
   ESMTPSA EHLO->HELO      -a      -tls    smtp  / 25
   LMTP    LHLO                            lmtp  / 24
   LMTPA   LHLO            -a              lmtp  / 24
   LMTPS   LHLO                    -tls    lmtp  / 24
   LMTPSA  LHLO            -a      -tls    lmtp  / 24
=item --pipeline

If the remote server supports it, attempt SMTP PIPELINING (RFC 2920).  This is a younger option, if you experience problems with it please notify the author.  Potential problem areas include servers accepting DATA even though there were no valid recipients (swaks should send empty body in that case, not QUIT) and deadlocks caused by sending packets outside the tcp window size.
</pre>
=== TLS ===
<blockquote>
These are options related to encrypting the transaction.  These have been tested and confirmed to work with all three transport methods.
</blockquote><blockquote>
-tls
: Require connection to use STARTTLS.  Exit if TLS not available for any reason (not advertised, negotiations failed, etc).
--tls-optional, -tlso
: Attempt to use STARTTLS if available, continue with normal transaction if TLS was unable to be negotiated for any reason
</blockquote><blockquote>
--tls-optionsl-strict, -tlsos
: Attempt to use STARTTLS if available.  Proceed with transaction if TLS is negotiated successfully or STARTTLS not advertised.  If STARTTLS is advertised but TLS negotiations fail, treat as an error and abort transaction.
</blockquote><blockquote>
--tls-on-connect, -tlsc
: Initiate a TLS connection immediately on connection.  Use to test smtps/ssmtp servers.  If this options is specified, the default port changes from 25 to 465, though this can still be overridden with the -p option.
</blockquote>

=== AUTHENTICATION ===
<pre>
=item -a, --auth

Require authentication.  If Authentication fails or is unavailable, stop transaction.  -a can take an argument specifying which type(s) of authentication to try.  If multiple, comma-delimited arguments are given, each specified auth type is tried in order until one succeeds or they all fail.  swaks currently supports PLAIN, LOGIN, and CRAM-MD5.  If no argument is given any available authentication type is used.  If neither password (-ap) or username (-au) is supplied on command line, swaks will prompt on STDIN.

SPA (NTLM/MSN) authentication is now supported.  Tested as a client against Exim and Stalker's CommuniGate, but implementation may be incomplete.  Authen::NTLM is currently required.  Note that CPAN hosts two different Authen::NTLM modules.  Current implementation requires Mark Bush's implementation (Authen/NTLM-1.02.tar.gz).  Plan to reimplement directly at some point to avoid confusion.

DIGEST-MD5 is now supported.  Tested as a client only against Stalker's Communigate, so implementation may be incomplete.  Requires Authen::DigestMD5 module.

CRAM-SHA1 is now supported.  Only tested against a hacked server implementation in Exim, so may be incomplete or incorrect.  Requires Digest::SHA1 module.

=item -ao, --auth-optional

Same as -a, but if authentication is unavailable or fails, attempts to continue transaction.

=item -aos, --auth-optional-strict

This option is a compromise between --auth and --auth-optional.  If the server does not advertise AUTH or is a specific AUTH type is requested of swaks but not offered by the server, the auth request is skipped and processing continues as if --auth-optional were specified.  If swaks can't support the auth type requested or non of the advertised auth types, or if auth is attempted but fails, this option behaves as --auth does and exits with an error

=item -au, --auth-user

Supply the username for authentication.  The string <> can be supplied to mean an empty username.

For SPA authentication, a "domain" can be specified after the regular username with a % seperator.  For instance, if "-ap user@example.com%NTDOM" is passed, "user@example.com" is the username and "NTDOM" is the domain.  NOTE: I don't actually have access to a mail server where the domain isn't ignored, so this may be implemented incorrectly.

=item -ap, --auth-password

Supply the password for authentication.  The string <> can be supplied to mean an empty password.

=item -am --auth-map

Provides a way to map alternate names onto base authentication types.  Useful for any sites that use alternate names for common types.  This functionality is actually used internally to map types SPA and MSN onto the base type NTLM.  The command line argument to simulate this would be "--auth-map SPA=NTLM,MSN=NTLM".  The base types supported are LOGIN, PLAIN, CRAM-MD5, DIGEST-MD5, and NTLM.  SPA and MSN are mapped on to NTLM automatically.

=item -apt, --auth-plaintext

Instead of showing AUTH strings literally (in base64), translate them to plaintext before printing on screen.
</pre>

=== MESSAGE CONTENTS ===
<pre>
=item -d, --data

Use argument as DATA portion of SMTP transaction, or prompt user if no argument specified.  Overridden by -l token DATA.

This string should be on one single line, with a literal \n representing where line breaks should be placed.  Leading dots will be quoted.  Closing dot is not required but is allowed.  Very basic token parsing is done.  %F is replaced with the value that will be used for "MAIL FROM", %T is replaced with "RCPT TO" values, %D is replaced with a timestamp, %H is replaced with the contents of --add-header, and %B is replaced with the message body.  See the --body option for the default body text.

Default value for this option is "Date: %D\nTo: %T\nFrom: %F\nSubject: test %D\nX-Mailer: swaks v$p_version jetmore.org/john/code/#swaks\n%H\n\n%B\n".
=item --body

Specify the body of the email.  The default is "This is a test mailing".  If no argument to --body, you will be prompted to supply one.  If '-' is supplied, body will be read from standard input.  If any other text is provided and the text represents an openable file, the content of that file is used as the body.  If it does not respresent an openable file, the text itself is used as the body.

=item --attach

When one or more --attach option is supplied, the message is changed into a multipart/mixed MIME message.  The arguments to --attach are processed the same as --body with regard to stdin, file contents, etc.  --attach can be supplie multiple times to create multiple attachments.  By default each attachment is attached as a application/octet-stream file.  See --attach-type for changing this behaviour.

When the message changes to MIME format, the previous body (%B) is attached as a text/plain type as the first attachment.  --body can still be used to specify the contents of this body attachment.

It is legal for '-' (STDIN) to be specified as an argument multiple times (once for --body and multiple times for --attach).  In this case, the same content will be attached each time it is specified.  This is useful for attaching the same content with multiple MIME types.

=item --attach-type

By default, content that gets MIME attached to a message with the --attach option is encoded as application/octet-stream.  --attach-type changes the mime type for every --attach option which follows it.  It can be specified multiple times.

=item -ah, --add-header

In the strictest sense, all this does is provide a value that replaces the %H token in the data.  Because of where %H is located in the default DATA, practically it is used to add custom headers without having to recraft the entire body.

The option can either be specified multiple times or a single time with multiple headers seperated by a literal '\n' string.  So, "--add-header 'Foo: bar' --add-header 'Baz: foo'" and "--add-header 'Foo: bar\nBaz: foo'" end up adding the same two headers.

=item --header, --h-Header

These options allow a way to change headers that already exist in the DATA.  These two calls do the same thing:

--header "Subject: foo"
--h-Subject foo

Subject is the example used.  If the header does not exist in the body already, these calls behave identically to --add-header.  The purpose of this option it to provide a fast way to change the nature of the default DATA for specific tests.  For instance if you wanted to test a subject filer in a mail system, you could use --h-Subject "SPAM STRING" to test rather than having to craft and entire new DATA string to pass to --data.
=item -g

If specified, swaks will read the DATA value for the mail from STDIN.  If there is a From_ line in the email, it will be removed (but see -nsf option).  Useful for delivering real message (stored in files) instead of using example messages.

=item -nsf, --no-strip-from

Don't strip the From_ line from the DATA portion, if present.
</pre>

=== PROGRAM OUTPUT ===
<blockquote>
By default swaks provides a transcript of its transactions to its caller (STDOUT/STDERR).  This transcript aims to be as faithful a representation as possible of the transaction.  It does fix up this output by adding informational prefixes to lines and by providing plaintext versions of TLS transactions
</blockquote><blockquote>
The "informational prefixes" are referred to as transaction hints.  These hints are initially composed of those marking lines that are output of swaks itself, either informational or error messages, and those that indicate a line of data actually sent or received in a transaction.  This table indicates the hints and their meanings:
</blockquote><blockquote>
HINTS INDICATING PROGRAM STATUS
HINTS INDICATING LINES OF DATA FROM TRANSACTION
</blockquote><blockquote>
The following options control what and how output is displayed to the caller.
</blockquote>
<pre>
=item -nth, --no-hints

Don't show transaction hints.  (Useful in conjunction with -hr to create copy/paste-able transactions

=item -hr, --hide-receive

Don't display reception lines

=item -hs, --hide-send

Don't display sending lines

=item -stl, --show-time-lapse

Display time lapse between send/receive pairs.  If 'i' is provided as argument or the Time::HiRes module is unavailable the time lapse will be integer only, otherwise it will be to the thousandth of a second.

=item -n, --suppress-data

If this option is specified, swaks summarizes the DATA portion of the SMTP transaction instead of printing every line.

=item --support

Cause swaks to print its capabilities and exit.  Certain features require non-standard perl modules.  This options evaluates whether these modules are present and lets you know which functionality is present.

=item -S, --silent

Cause swaks to be silent.  "-S" causes swaks to print no output until an error occurs, after which all output is shown.  "-S -S" causes swaks to only show error conditions.  "-S -S -S" shows no output.
</pre>

=== MISCELLANEOUS ===
<pre>

=item -m

Emulate Mail command.  Least used option in swaks.

=item --force-getpwuid

In releases 20050709.1 and earlier of swaks the local_part of an automatically generated sender email address would be found using the getpwuid system call on the euid of the current process.  Depending on the users' desires, this may be confusing.  Following the 20050709.1 release the local_part is not looked up via the getlogin() funtion which attempts to look up the actual username of the logged in user, regardless of the euid of the process they are currently running.

An example of where this might be an issue is running swaks under sudo for testing reasons when interacting with --pipe or --socket.  It makes sense that you need to run the process as a specific username but you would prefer your email to be from your real username.  You could always do this manually using the -s option, but this is an attempt to make it easier.

--force-getpwuid forces the old behaviour for anyone who prefered that behaviour.  Also, if there is no "real" user for getlogin() to look up, the old getpwuid method will be used.  This would happen if the process was run from cron or some other headless daemon.

=item --help

This screen.

=item --version

Version info.
</pre>

== REQUIRES ==

<blockquote>
swaks does not have any single requirement except the standard module Getopt::Long.  However, there may be modules that are required for a given invocation of swaks.  The following list details the features reported by the --support option, what is actually being tested, and the consequences of the feature being reported as "not available"
</blockquote><blockquote>
AUTH CRAM-MD5
: CRAM-MD5 authentication requires the Digest::MD5 perl module.  If this is unavailable and authentication is required, swaks will error if CRAM-MD5 was the specific authentication type requested, or if no specific auth type was requested but CRAM-MD5 was the only type advertised by the server.
</blockquote><blockquote>
AUTH CRAM-SHA1
: CRAM-SHA1 authentication requires the Digest::SHA1 perl module.  If this is unavailable and authentication is required, swaks will error if CRAM-SHA1 was the specific authentication type requested, or if no specific auth type was requested but CRAM-SHA1 was the only type advertised by the server.
</blockquote><blockquote>
AUTH DIGEST-MD5
: DIGEST-MD5 authentication requires the Authen::DigestMD5 perl module.  If this is unavailable and authentication is required, swaks will error if DIGEST-MD5 was the specific authentication type requested, or if no specific auth type was requested but DIGEST-MD5 was the only type advertised by the server.
</blockquote><blockquote>
AUTH NTLM
: NTLM/SPA/MSN authentication requires the Authen::NTLM perl module.  If this is unavailable and authentication is required, swaks will error if NTLM was the specific authentication type requested, or if no specific auth type was requested but NTLM was the only type advertised by the server.  Note that there are two modules using the Authen::NTLM namespace on CPAN.  The Mark Bush implementation (Authen/NTLM-1.02.tar.gz) is the version required here.
</blockquote><blockquote>
Basic AUTH
: All authentication types require base64 encoding and decoding.  If possible, swaks uses the MIME::Base64 perl module to perform these actions.  However, if MIME::Base64 is not available swaks will use its own onboard base64 routines.  These are slower than the MIME::Base64 routines and less reviewed, though they have been tested thoroughly.  When possible it is recommended that you install MIME::Base64.
</blockquote><blockquote>
Date Manipulation
: swaks generates an RFC compliant date string when it interpolates the %D token in message bodies.  In order to build the GMT offset in this string, it needs the Time::Local module.  It would be very odd for this module not to be available because it has been included in the perl distribution for some time.  However, if it is not loadable for some reason and swaks interpolates a %D token (as it would when using the default body), the date string is in GMT instead of your local timezone.
</blockquote><blockquote>
High Resolution Timing
: When diagnosing SMTP delays using --show-time-lapse, by default high resolution timing is attempted using the Time::HiRes module.  If this module is not available, swaks uses a much poorer timing source with one second granularity.
</blockquote><blockquote>
Local Hostname Detection
: swaks uses your local machine's hostname to build the HELO string and sending email address when they are not specified on the command line.  If the Sys::Hostname module (which is a part of the base distribution) is not available for some reason, the user is prompted interactively for the HELO and sender strings.  Note that Sys::Hostname can sometimes fail to find the local hostname even when the module is available, which has the same behaviour.
</blockquote><blockquote>
MX Routing
: If the destination mail server is not specified using the --server option, swaks attempts to use DNS to route the message based on the recipient email address.  If the Net::DNS perl module is not available, swaks uses 'localhost' as the outbound mail server.
</blockquote><blockquote>
Pipe Transport
: The IPC::Open2 module is required to deliver a message to a spawned subprocess using the --pipe option.  If this module, which is included in the base perl distribution, in not available, attempting to call swaks with the --pipe option will result in an error.
</blockquote><blockquote>
Socket Transport
: The IO::Socket module is required to deliver a message to an internet domain socket (the default behaviour of swaks) and to a unix domain socket (specified with the --socket option).  If this module, which is included in the base perl distribution, is not available, attempting to call swaks with the --server or --socket options (or none of the --socket, --server, and --pipe options) will result in an error.
</blockquote><blockquote>
TLS
: TLS functionality requires the Net::SSLeay perl module.  If this module is not available and TLS was required (using the --tls-on-connect or --tls options), the session will error out.  If TLS was requested but not required (using the --tls-optional option), swaks will continue but not attempt a TLS session.
</blockquote>

== PORTABILITY ==

<blockquote>
Operating Systems
: This program was primarily intended for use on unix-like operating systems, and it should work on any reasonable version thereof.  It has been developed and tested on Solaris, Linux, and Mac OS X and is feature complete on all of these.
</blockquote><blockquote>
: This program is known to demonstrate basic functionality on Windows using ActiveState's Perl.  It has not been fully tested.  Known to work are basic SMTP functionality and the LOGIN, PLAIN, and CRAM-MD5 auth types.  Unknown is any TLS functionality and the NTLM/SPA and Digest-MD5 auth types.
</blockquote><blockquote>
: Because this program should work anywhere Perl works, I would appreciate knowing about any new operating systems you've thoroughly used swaks on as well as any problems encountered on a new OS.
</blockquote><blockquote>
Mail Servers
: This program was almost exclusively developed against Exim mail servers.  It was been used casually by the author, though not thoroughly tested, with Sendmail, Smail, Exchange, Oracle Collaboration Suite, and Communigate.  Because all functionality in swaks is based off of known standards it should work with any fairly modern mail server.  If a problem is found, please alert the author at the address below.
</blockquote>

== EXIT CODES ==
<blockquote>
{|cellpadding=5 cellspacing=5
|-
| valign=top align=right | 0
| no errors occurred
|-
| valign=top align=right | 1
| error parsing command line options
|-
| valign=top align=right | 2
| error connecting to remote server
|-
| valign=top align=right | 3
| unknown connection type
|-
| valign=top align=right | 4
| while running with connection type of "pipe", fatal problem writing to or reading from the child process
|-
| valign=top align=right | 5
| while running with connection type of "pipe", child process died unexpectedly.  This can mean that the program specified with --pipe doesn't exist.
|-
| valign=top align=right | 6
| Connection closed unexpectedly.  If the close is detected in response to the 'QUIT' swaks sends following an unexpected response, the error code for that unexpected response is used instead.  For instance, if a mail server returns a 550 response to a MAIL FROM: and then immediately closes the connection, swaks detects that the connection is closed, but uses the more specific exit code 23 to detail the nature of the failure.  If instead the server return a 250 code and then immediately closes the connection, swaks will use the exit code 6 because there is not a more specific exit code.
|-
| valign=top align=right | 10
| error in prerequisites (needed module not available)
|-
| valign=top align=right | 21
| error reading initial banner from server
|-
| valign=top align=right | 22
| error in HELO transaction
|-
| valign=top align=right | 23
| error in MAIL transaction
|-
| valign=top align=right | 24
| no RCPTs accepted
|-
| valign=top align=right | 25
| server returned error to DATA request
|-
| valign=top align=right | 26
| server did not accept mail following data
|-
| valign=top align=right | 27
| server returned error after normal-session quit request
|-
| valign=top align=right | 28
| error in AUTH transaction
|-
| valign=top align=right | 29
| error in TLS transaction
|-
| valign=top align=right | 32
| error in EHLO following TLS negotiation
|-
|}
</blockquote>

== CONTACT ==
<blockquote>
proj-swaks@jetmore.net
: Please use this address for general contact, questions, patches, requests, etc.
</blockquote><blockquote>
updates-swaks@jetmore.net
: If you would like to be put on a list to receive notifications when a new version of swaks is released, please send an email to this address.
</blockquote><blockquote>
http://www.jetmore.org/john/code/#swaks
:Change logs, this help, and the latest version is found at this link.
</blockquote>

